/* Subset Sum problem Geeks for Geeks */
/* https://www.geeksforgeeks.org/problems/subset-sum-problem-1611555638 */

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int N = Integer.parseInt(read.readLine());
            String input_line[] = read.readLine().trim().split("\\s+");
            int arr[]= new int[N];
            for(int i = 0; i < N; i++)
                arr[i] = Integer.parseInt(input_line[i]);
            int sum = Integer.parseInt(read.readLine());

            Solution ob = new Solution();
            if(ob.isSubsetSum(N, arr, sum))
            System.out.println(1);
            else
            System.out.println(0);

            
        }
    }
}

// } Driver Code Ends




//User function Template for Java

class Solution{

    static Boolean subset(int n,int arr[],int sum,int index,Boolean dp[][]){
      
          if(sum==0) return true;
          
          if(sum<0) return false;
        
          if(index>=n) return false;
      
        
        if(dp[index][sum]!=null) return dp[index][sum];
        
        return  dp[index][sum]=  subset(n,arr,sum-arr[index],index+1,dp)
                                 ||
                                 subset(n,arr,sum,index+1,dp);
       
  
    }
    

    
    static Boolean isSubsetSum(int N, int arr[], int sum){
     boolean dp[][] = new boolean [N+1][sum+1];
     for(int i=0;i<=N;i++) dp[i][0] = true;
     for(int j=1;j<=sum;j++) dp[0][j] = false;
     for(int i=1;i<=N;i++){
         for(int j=1;j<=sum;j++){
             if(j-arr[i-1]>=0)
             dp[i][j]= dp[i-1][j-arr[i-1]] || dp[i-1][j];
             else 
             dp[i][j] = dp[i-1][j];
         }
     }
     
     
     return dp[N][sum];
     
     
    }
}
